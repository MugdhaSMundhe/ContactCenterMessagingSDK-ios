// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ContactCenterMessagingWidget
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import ContactCenterMessagingSDK
@_exported import ContactCenterMessagingWidget
import DeveloperToolsSupport
import Foundation
import MobileCoreServices
import Network
import Photos
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class ChatData {
  public static let shared: ContactCenterMessagingWidget.ChatData
  public var conversationsArray: Foundation.NSMutableArray?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class LiveChatLoadingViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public enum TitleBarElement : Swift.Int {
  case close
  case minimize
  case email
  case share
  case chime
  case logoImage
  case option1
  case option2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MessagingErrorStates : Swift.Int {
  case Network = 0
  case InitializeSDK
  case OOOHours
  case ChatConfig
  case StartChat
  case SendCustomerMessage
  case AgentLeft
  case OnNewMessage
  case GetLiveChatTranscript
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum TitlePosition : Swift.Int {
  case left
  case center
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public let kShowPostChatSurveyContext: Swift.String
public let kPostChatSurveyContext: Swift.String
public let kCanRenderPostChat: Swift.String
public let LogLCWFeatures: Swift.String
public let OOBWidgetStarted: Swift.String
public let NewOOBWidgetStarted: Swift.String
public let RestoreOOBWidgetStarted: Swift.String
public let LiveChatVisibilityFalse: Swift.String
public let LiveChatVisibilityTrue: Swift.String
public let AppGoingToTerminate: Swift.String
public let MissingMessageCallStarted: Swift.String
public let MissingMessageCallEnded: Swift.String
public let ParseAdaptiveCardFailed: Swift.String
public let ConfirmationConfirmButtonClicked: Swift.String
public let ConfirmationCancelButtonClicked: Swift.String
public let ConversationEndedByCustomer: Swift.String
public let EmailTranscriptSent: Swift.String
public let EmailTranscriptFailed: Swift.String
public let EmailTranscriptCancelButtonClicked: Swift.String
public let DownloadTranscriptButtonClicked: Swift.String
public let EmailTranscriptButtonClicked: Swift.String
public let DownloadTranscriptResponseNullOrUndefined: Swift.String
public let DownloadTranscriptFailed: Swift.String
public let AudioToggleButtonClicked: Swift.String
public let HeaderCloseButtonClicked: Swift.String
public let HeaderMinimizeButtonClicked: Swift.String
public let NetworkDisconnected: Swift.String
public let NetworkReconnected: Swift.String
public let GetConversationDetailsCallFailed: Swift.String
public let CustomContextReceived: Swift.String
public let PrechatSubmitted: Swift.String
public let ContinueChatButtonClicked: Swift.String
public let StartNewChatButtonClicked: Swift.String
public let PreChatSurveyStartChatMethodFailed: Swift.String
public let AttachmentUploadValidatorMiddlewareFailed: Swift.String
public let MessageSent: Swift.String
public let MessageReceived: Swift.String
public let SystemMessageReceived: Swift.String
public let RehydrateMessageReceived: Swift.String
public let EndChatFailed: Swift.String
public let CloseChatCall: Swift.String
public let ChatDisconnectThreadEventReceived: Swift.String
public let LoadingPaneLoaded: Swift.String
public let LoadingPaneUnLoaded: Swift.String
public let EmailPaneLoaded: Swift.String
public let OutOfOfficePaneLoaded: Swift.String
public let PrechatSurveyLoaded: Swift.String
public let StartChatErrorPaneLoaded: Swift.String
public let WebChatLoaded: Swift.String
public let ConfirmationPaneLoaded: Swift.String
public let ReconnectPaneLoaded: Swift.String
public let ReconnectPaneNotLoaded: Swift.String
public let LinkModePostChatWorkflowStarted: Swift.String
public let EmbedModePostChatWorkflowStarted: Swift.String
public let PostChatContextCallSucceed: Swift.String
public let PostChatContextCallFailed: Swift.String
public let PostChatDisplayFailed: Swift.String
public let PostChatSurveyLoadingPaneLoaded: Swift.String
public let PostChatSurveyLoaded: Swift.String
public func messageBackgroudImageCapInsets(image: UIKit.UIImage?) -> UIKit.UIEdgeInsets?
public func clearMessagingData()
public func initSounds(soundData: Foundation.NSData?) -> Foundation.NSData
public func parseJSON(val: Swift.String) -> Foundation.NSDictionary?
extension UIKit.UIColor {
  public class func color(hexString: Swift.String, alpha: CoreFoundation.CGFloat? = 1.0) -> UIKit.UIColor
}
public struct NotificationView {
}
@objc public protocol LCWMessagingDelegate {
  @objc optional func onChatMinimizeButtonClicked()
  @objc optional func onChatCloseButtonClicked()
  @objc optional func onViewDisplayed()
  @objc optional func onChatInitiated()
  @objc optional func onCustomerChatEnded()
  @objc optional func onAgentChatEnded()
  @objc optional func onTitleOption1Clicked()
  @objc optional func onTitleOption2Clicked()
  @objc optional func onAgentAssigned()
  @objc optional func onLinkClicked(url: Swift.String)
  @objc optional func onNewCustomerMessage(message: Swift.String?)
  @objc optional func onNewMessageReceived(message: ContactCenterMessagingSDK.LCWGetMessageResponse?)
  @objc optional func onError(state: ContactCenterMessagingWidget.MessagingErrorStates, errorMessage: Swift.String?)
  @objc optional func onChatRestored()
  @objc optional func onPreChatSurveyDisplayed()
  @objc optional func onPostChatSurveyDisplayed()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class LiveChatMessagingViewController : UIKit.UINavigationController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didReceiveMemoryWarning()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public func setTranscriptViewPropeties(properties: ContactCenterMessagingWidget.MessagingViewProperties)
  @_Concurrency.MainActor @preconcurrency public func setFooterSeparationViewPropeties(properties: ContactCenterMessagingWidget.FooterSeparationProperties)
  @_Concurrency.MainActor @preconcurrency public func setFooterProperties(properties: ContactCenterMessagingWidget.FooterProperties)
  @_Concurrency.MainActor @preconcurrency public func setTitleBarProperties(properties: ContactCenterMessagingWidget.TitleBarProperties)
  @_Concurrency.MainActor @preconcurrency public func setSendButtonProperties(properties: ContactCenterMessagingWidget.SendButtonProperties)
  @_Concurrency.MainActor @preconcurrency public func setStringProperties(properties: ContactCenterMessagingWidget.CustomerInformationMessages)
  @_Concurrency.MainActor @preconcurrency public func setEmailPaneProperties(properties: ContactCenterMessagingWidget.EmailPaneProperties)
  @_Concurrency.MainActor @preconcurrency public func setLoadingPaneProperties(properties: ContactCenterMessagingWidget.LoadingPaneProperties)
  @_Concurrency.MainActor @preconcurrency public func setOOOHoursViewProperties(properties: ContactCenterMessagingWidget.OOOHoursViewProperties)
  @_Concurrency.MainActor @preconcurrency public func setStartChatErrorViewProperties(properties: ContactCenterMessagingWidget.StartChatErrorViewProperties)
  @_Concurrency.MainActor @preconcurrency public func setConfirmationPaneProperties(properties: ContactCenterMessagingWidget.ConfirmationPaneProperties)
  @_Concurrency.MainActor @preconcurrency public func setPreChatPaneProperties(properties: ContactCenterMessagingWidget.PreChatPaneProperties)
  @_Concurrency.MainActor @preconcurrency public func setPostChatPaneProperties(properties: ContactCenterMessagingWidget.PostChatPaneProperties)
  @_Concurrency.MainActor @preconcurrency public func setDownloadedTranscriptProperties(properties: ContactCenterMessagingWidget.DownloadedTranscriptProperties)
  @_Concurrency.MainActor @preconcurrency public func setMediaProperties(properties: ContactCenterMessagingWidget.MediaPaneProperties)
  @_Concurrency.MainActor @preconcurrency public func setNotificationPaneProperties(properties: ContactCenterMessagingWidget.NotificationPaneProperties)
  @objc @_Concurrency.MainActor @preconcurrency public func setReconnectViewProperties(properties: ContactCenterMessagingWidget.ReconnectViewProperties)
  @available(iOS 5.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public func launchMessagingViewController(delegate: (any ContactCenterMessagingWidget.LCWMessagingDelegate)? = nil) -> ContactCenterMessagingWidget.LiveChatMessagingViewController
extension UIKit.UINavigationController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var childForStatusBarStyle: UIKit.UIViewController? {
    @objc get
  }
}
@_hasMissingDesignatedInitializers public class ChimeSound {
  public static let sharedInstance: ContactCenterMessagingWidget.ChimeSound
  public func initChimeData(soundData: Foundation.NSData?)
  public func playSound()
  public func stopSound()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class TitleBarProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var statusBarColorLight: Swift.Bool
  public var headerTitle: Swift.String
  public var headerBackgroundColor: UIKit.UIColor
  public var headerTitleColor: UIKit.UIColor
  public var headerTitleFontStyle: UIKit.UIFont
  public var isHeaderTitleBold: Swift.Bool
  public var shareButtonTextColor: UIKit.UIColor
  public var shareImageData: Foundation.Data?
  public var shareTextName: Swift.String
  public var shareButtonWidth: Swift.Int
  public var shareButtonHeight: Swift.Int
  public var option1ButtonTextColor: UIKit.UIColor
  public var option1ImageData: Foundation.Data?
  public var option1TextName: Swift.String
  public var option1ButtonWidth: Swift.Int
  public var option1ButtonHeight: Swift.Int
  public var option2ButtonTextColor: UIKit.UIColor
  public var option2ImageData: Foundation.Data?
  public var option2TextName: Swift.String
  public var option2ButtonWidth: Swift.Int
  public var option2ButtonHeight: Swift.Int
  public var chimeButtonTextColor: UIKit.UIColor
  public var chimeOnImageData: Foundation.Data?
  public var chimeOffImageData: Foundation.Data?
  public var chimeTextName: Swift.String
  public var chimeTextOn: Swift.String
  public var chimeTextOff: Swift.String
  public var chimeButtonWidth: Swift.Int
  public var chimeButtonHeight: Swift.Int
  public var chimeSoundData: Foundation.NSData?
  public var emailButtonTextColor: UIKit.UIColor
  public var emailImageData: Foundation.Data?
  public var emailTextName: Swift.String
  public var emailButtonWidth: Swift.Int
  public var emailButtonHeight: Swift.Int
  public var closeButtonTextColor: UIKit.UIColor
  public var closeImageData: Foundation.Data?
  public var closeTextName: Swift.String
  public var closeButtonWidth: Swift.Int
  public var closeButtonHeight: Swift.Int
  public var minimizeButtonTextColor: UIKit.UIColor
  public var minimizeImageData: Foundation.Data?
  public var minimizeTextName: Swift.String
  public var minimizeButtonWidth: Swift.Int
  public var minimizeButtonHeight: Swift.Int
  public var minimumSpaceBetweenHeaderButton: Swift.Int
  public var showShareButton: Swift.Bool
  public var showLogo: Swift.Bool
  public var logoImageData: Foundation.Data?
  public var logoImageWidth: Swift.Int
  public var logoImageHeight: Swift.Int
  public var leftHeaderIcons: [Swift.Int]
  public var rightHeaderIcons: [Swift.Int]
  public var setHeaderTitlePosition: ContactCenterMessagingWidget.TitlePosition
  public var isHeaderTitleLogoTogetherRequired: Swift.Bool
  public var headerTitleImageData: Foundation.Data?
  public var headerTitleImageWidth: Swift.Int
  public var headerTitleImageHeight: Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FooterSeparationProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var showFooterSeparation: Swift.Bool
  public var height: Swift.Int
  public var backgroundColor: UIKit.UIColor
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FooterProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var footerViewHeight: Swift.Int
  public var hideDownloadTranscriptButton: Swift.Bool
  public var hideEmailTranscriptButton: Swift.Bool
  public var hideAudioNotificationButton: Swift.Bool
  public var footerBackgroundColor: UIKit.UIColor
  public var inputContainerBackgroundColor: UIKit.UIColor
  public var footerBorderColor: UIKit.UIColor
  public var footerBorderWidth: Swift.Int
  public var footerCornerRadius: Swift.Int
  public var textFieldBorderColor: UIKit.UIColor
  public var textFieldBorderWidth: Swift.Int
  public var textFieldCornerRadius: Swift.Int
  public var textFieldTopPadding: Swift.Int
  public var textFieldBottomPadding: Swift.Int
  public var textFieldLeftPadding: Swift.Int
  public var textFieldRightPadding: Swift.Int
  public var textFieldFont: UIKit.UIFont
  public var textFieldTextColor: UIKit.UIColor
  public var textFieldPlaceHolderColor: UIKit.UIColor
  public var textFieldHintText: Swift.String
  public var textFieldMaxLines: Swift.Int
  public var textFieldTextAlignment: UIKit.NSTextAlignment
  public var textFieldBackgroundColor: UIKit.UIColor
  public var isDynamicSizeTextFieldRequired: Swift.Bool
  public var isCharacterLimitRequired: Swift.Bool
  public var showRemainingLimitCharacters: Swift.Bool
  public var characterLimitTextColor: UIKit.UIColor
  public var characterLimitTextFont: UIKit.UIFont
  public var characterLimitBackgroundColor: UIKit.UIColor
  public var textFieldCharacterLimit: Swift.Int
  public var characterLimitBottomPadding: Swift.Int
  public var characterLimitRightPadding: Swift.Int
  public var characterLimitTopPadding: Swift.Int
  public var characterLimitLeftPadding: Swift.Int
  public var characterLimitViewWidth: Swift.Int
  public var characterLimitViewHeight: Swift.Int
  public var keyboardType: UIKit.UIKeyboardType
  public var sendMessageOnReturn: Swift.Bool
  public var dismissKeyBoardOnReturn: Swift.Bool
  public var showTextForChime: Swift.Bool
  public var chimeButtonTextFont: UIKit.UIFont
  public var chimeButtonTextColor: UIKit.UIColor
  public var chimeOnImageData: Foundation.Data?
  public var chimeOffImageData: Foundation.Data?
  public var chimeTextName: Swift.String
  public var chimeTextOn: Swift.String
  public var chimeTextOff: Swift.String
  public var chimeSoundData: Foundation.NSData?
  public var showTextForEmailButton: Swift.Bool
  public var showEmailTextFont: UIKit.UIFont
  public var emailTranscriptButtonTextColor: UIKit.UIColor
  public var emailTranscriptImageData: Foundation.Data?
  public var emailTranscriptText: Swift.String
  public var showTextForDownloadTranscript: Swift.Bool
  public var downloadTranscriptTextFont: UIKit.UIFont
  public var downloadTranscriptButtonTextColor: UIKit.UIColor
  public var downloadTranscriptImageData: Foundation.Data?
  public var downloadTranscriptTextName: Swift.String
  public var BANNER_FILE_NULL_ERROR: Swift.String
  public var BANNER_FILE_SIZE_EXTENSION_ERROR: Swift.String
  public var BANNER_FILE_EXTENSION_ERROR: Swift.String
  public var BANNER_FILE_IS_EMPTY_ERROR: Swift.String
  public var BANNER_ERROR_MESSAGE: Swift.String
  public var BANNER_FILE_SIZE_ERROR: Swift.String
  public var MIDDLEWARE_BANNER_FILE_SIZE_WITHOUT_EXTENSION_ERROR: Swift.String
  public var MIDDLEWARE_BANNER_FILE_WITHOUT_EXTENSION: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SendButtonProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var buttonImageData: Foundation.Data?
  public var disableImageData: Foundation.Data?
  public var borderColor: UIKit.UIColor
  public var borderWidth: Swift.Int
  public var cornerRadius: Swift.Int
  public var buttonTitle: Swift.String
  public var backgroundColor: UIKit.UIColor
  public var textColor: UIKit.UIColor
  public var gradientEffect: [UIKit.UIColor]
  public var gradientEffectLocations: [Foundation.NSNumber]
  public var useGradientEffect: Swift.Bool
  public var buttonFieldRightMargin: Swift.Int
  public var buttonFieldTopMargin: Swift.Int
  public var buttonFieldBottomMargin: Swift.Int
  public var buttonWidth: Swift.Int
  public var buttonHeight: Swift.Int
  public var sendButtonWidth: Swift.Int
  public var toggleSendStateAfterMsgSend: Swift.Bool
  public var disableBorderColor: UIKit.UIColor
  public var disableBorderWidth: Swift.Int
  public var disableCornerRadius: Swift.Int
  public var disableButtonTitle: Swift.String
  public var disableBackgroundColor: UIKit.UIColor
  public var disableTextColor: UIKit.UIColor
  public var disableGradientEffect: [UIKit.UIColor]
  public var disableGradientEffectLocations: [Foundation.NSNumber]
  public var disableUseGradientEffect: Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CustomerInformationMessages : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var networkNotAvailable: Swift.String
  public var networkNotAvailableNotification: Swift.String
  public var disconnectedNotification: Swift.String
  public var networkLongTime: Swift.String
  public var networkAvailable: Swift.String
  public var defaultCustomerName: Swift.String
  public var closeButtonAccessibilityMessage: Swift.String
  public var minimizeButtonAccessibilityMessage: Swift.String
  public var emailButtonAccessibilityMessage: Swift.String
  public var shareButtonAccessibilityMessage: Swift.String
  public var downloadButtonAccessibilityMessage: Swift.String
  public var option1ButtonAccessibilityMessage: Swift.String
  public var option2ButtonAccessibilityMessage: Swift.String
  public var chimeButtonOnAccessibilityMessage: Swift.String
  public var chimeButtonOffAccessibilityMessage: Swift.String
  public var sendButtonAccessibilityMessage: Swift.String
  public var inputTextAccessibilityMessage: Swift.String
  public var titleAccessibilityMessage: Swift.String
  public var closeNotificationAccessibilityMessage: Swift.String
  public var downloadAttachmentAccessibilityMessage: Swift.String
  public var openNotificationAccessibilityMessage: Swift.String
  public var downloadNotificationAccessibilityMessage: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MessagingViewProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var customerName: Swift.String?
  public var rehydrate: Swift.Bool
  public var keyboardDismissMode: UIKit.UIScrollView.KeyboardDismissMode
  public var hugCustomerMessageContent: Swift.Bool
  public var hugAgentMessageContent: Swift.Bool
  public var setSpaceBetweenBubble: Swift.Int
  public var isChatFromBottom: Swift.Bool
  public var messagingTranscriptBackgroundColor: UIKit.UIColor
  public var adaptiveCardViewBackground: UIKit.UIColor
  public var agentIconImageData: Foundation.Data?
  public var showNameInBubbles: Swift.Bool
  public var showNameInTimeStamp: Swift.Bool
  public var agentNameTextColor: UIKit.UIColor {
    get
    set
  }
  public var customerNameTextColor: UIKit.UIColor {
    get
    set
  }
  public var agentMessageBackgroundColor: UIKit.UIColor
  public var agentMessageTextColor: UIKit.UIColor
  public var agentMessageBorderColor: UIKit.UIColor
  public var agentMessageCornerRadius: Swift.Int
  public var agentMessageBorderWidth: Swift.Int
  public var agentMessageFontStyle: UIKit.UIFont
  public var agentTopPadding: Swift.Int
  public var agentBottomPadding: Swift.Int
  public var agentLeftPadding: Swift.Int
  public var agentRightPadding: Swift.Int
  public var agentMessageTextAlignment: UIKit.NSTextAlignment
  public var agentMessageLeftMargin: Swift.Int
  public var agentMessageRightMargin: Swift.Int
  public var agentSpeechIcon: Foundation.Data?
  public var agentSpeechInitialBackgroundColor: UIKit.UIColor
  public var agentSpeechInitialFontStyle: UIKit.UIFont
  public var agentSpeechInitialTextAlignment: UIKit.NSTextAlignment
  public var agentSpeechInitialTextColor: UIKit.UIColor
  public var agentSpeechInitialSize: CoreFoundation.CGRect
  public var customerMessageBackgroundColor: UIKit.UIColor
  public var customerMessageTextColor: UIKit.UIColor
  public var customerMessageBorderColor: UIKit.UIColor
  public var customerMessageCornerRadius: Swift.Int
  public var customerMessageBorderWidth: Swift.Int
  public var customerMessageFontStyle: UIKit.UIFont
  public var customerTopPadding: Swift.Int
  public var customerBottomPadding: Swift.Int
  public var customerLeftPadding: Swift.Int
  public var customerRightPadding: Swift.Int
  public var customerMessageLeftMargin: Swift.Int
  public var customerMessageRightMargin: Swift.Int
  public var customerSpeechIcon: Foundation.Data?
  public var customerMessageTextAlignment: UIKit.NSTextAlignment
  public var customerNameFontStyle: UIKit.UIFont
  public var agentNameFontStyle: UIKit.UIFont
  public var header2MessageFontStyle: UIKit.UIFont
  public var header3MessageFontStyle: UIKit.UIFont
  public var header4MessageFontStyle: UIKit.UIFont
  public var shouldHandleLinkExternally: Swift.Bool
  public var systemMessageTextColor: UIKit.UIColor
  public var systemMessageFontStyle: UIKit.UIFont
  public var systemMessageBackgroundColor: UIKit.UIColor
  public var systemMessageBorderColor: UIKit.UIColor
  public var systemMessageCornerRadius: Swift.Int
  public var systemMessageBorderWidth: Swift.Int
  public var systemMessageAlignment: UIKit.NSTextAlignment
  public var systemMessageTopMargin: Swift.Int
  public var systemMessageBottomMargin: Swift.Int
  public var systemMessageLeftMargin: Swift.Int
  public var systemMessageRightMargin: Swift.Int
  public var systemMessageLeftPadding: Swift.Int
  public var systemMessageTopPadding: Swift.Int
  public var systemMessageRightPadding: Swift.Int
  public var systemMessageBottomPadding: Swift.Int
  public var agentTypingMessageBackgroundColor: UIKit.UIColor
  public var agentTypingTextBackgroundColor: UIKit.UIColor
  public var agentTypingMessageBorderColor: UIKit.UIColor
  public var agentTypingMessageCornerRadius: Swift.Int
  public var agentTypingMessageBorderWidth: Swift.Int
  public var agentTypingTextColor: UIKit.UIColor
  public var agentTypingTextFontStyle: UIKit.UIFont
  public var agentTypingTextAlignment: UIKit.NSTextAlignment
  public var agentTypingAccessibilityMessage: Swift.String
  public var agentTypingMessageTopMargin: Swift.Int
  public var agentTypingMessageBottomMargin: Swift.Int
  public var agentTypingMessageLeftMargin: Swift.Int
  public var agentTypingMessageRightMargin: Swift.Int
  public var agentTypingTextLeftMargin: Swift.Int
  public var agentTypingTextTopMargin: Swift.Int
  public var agentTypingTextRightMargin: Swift.Int
  public var agentTypingTextBottomMargin: Swift.Int
  public var hideStoppedTyping: Swift.Bool
  public var showTypingAnimation: Swift.Bool
  public var showTypingAnimationText: Swift.Bool
  public var typingAnimationTextFontStyle: UIKit.UIFont
  public var typingAnimationTextColor: UIKit.UIColor
  public var typingAnimationImage: UIKit.UIImage?
  public var typingAnimationImageBackgroundColor: UIKit.UIColor
  public var typingAnimationImageWidth: Swift.Int
  public var typingAnimationImageHeight: Swift.Int
  public var typingAnimationImageLeftMargin: Swift.Int
  public var typingAnimationImageTopMargin: Swift.Int
  public var typingStaticImage: UIKit.UIImage?
  public var typingStaticImageBackgroundColor: UIKit.UIColor
  public var typingStaticImageWidth: Swift.Int
  public var typingStaticImageHeight: Swift.Int
  public var typingStaticImageLeftMargin: Swift.Int
  public var typingStaticImageTopMargin: Swift.Int
  public var showNetworkStatusAnimationImage: Swift.Bool
  public var showNetworkStatusAnimationText: Swift.Bool
  public var networkStatusAnimationImage: UIKit.UIImage?
  public var networkAnimationCellTopMargin: Swift.Int
  public var networkAnimationCellBottomMargin: Swift.Int
  public var networkAnimationCellLeftMargin: Swift.Int
  public var networkAnimationCellRightMargin: Swift.Int
  public var networkAnimationCellBackgroundColor: UIKit.UIColor
  public var networkAnimationTextBackgroundColor: UIKit.UIColor
  public var networkAnimationCellBorderColor: UIKit.UIColor
  public var networkAnimationCellCornerRadius: Swift.Int
  public var networkAnimationCellBorderWidth: Swift.Int
  public var networkStatusAnimationImageWidth: Swift.Int
  public var networkStatusAnimationImageHeight: Swift.Int
  public var networkStatusAnimationImageLeftMargin: Swift.Int
  public var networkStatusAnimationImageTopMargin: Swift.Int
  public var networkStatusAnimationImageBackgroundColor: UIKit.UIColor
  public var networkStatusAnimationTextFontStyle: UIKit.UIFont
  public var networkStatusAnimationTextColor: UIKit.UIColor
  public var networkStatusAnimationTextTopMargin: Swift.Int
  public var networkStatusAnimationTextBottomMargin: Swift.Int
  public var networkStatusAnimationTextLeftMargin: Swift.Int
  public var networkStatusAnimationTextRightMargin: Swift.Int
  public var networkStatusStaticImage: UIKit.UIImage?
  public var networkStaticCellTopMargin: Swift.Int
  public var networkStaticCellBottomMargin: Swift.Int
  public var networkStaticCellLeftMargin: Swift.Int
  public var networkStaticCellRightMargin: Swift.Int
  public var networkStaticCellBackgroundColor: UIKit.UIColor
  public var networkStaticCellBorderColor: UIKit.UIColor
  public var networkStaticCellCornerRadius: Swift.Int
  public var networkStaticCellBorderWidth: Swift.Int
  public var networkStaticImageWidth: Swift.Int
  public var networkStaticImageHeight: Swift.Int
  public var networkStaticImageLeftMargin: Swift.Int
  public var networkStaticImageTopMargin: Swift.Int
  public var networkStaticImageBackgroundColor: UIKit.UIColor
  public var networkStaticTextFontStyle: UIKit.UIFont
  public var networkStaticTextColor: UIKit.UIColor
  public var networkStaticTextTopMargin: Swift.Int
  public var networkStaticTextBottomMargin: Swift.Int
  public var networkStaticTextLeftMargin: Swift.Int
  public var networkStaticTextRightMargin: Swift.Int
  public var agentBackgroundImageData: Foundation.Data?
  public var customerBackgroundImageData: Foundation.Data?
  public var setConversationBackgroundImage: Swift.Bool
  public var setSpeechBubbleView: Swift.Bool
  public var setAgentBackgroundImageStretchTopInset: Swift.Int
  public var setAgentBackgroundImageStretchLeftInset: Swift.Int
  public var setAgentBackgroundImageStretchRightInset: Swift.Int
  public var setAgentBackgroundImageStretchBottomInset: Swift.Int
  public var setCustomerBackgroundImageStretchTopInset: Swift.Int
  public var setCustomerBackgroundImageStretchLeftInset: Swift.Int
  public var setCustomerBackgroundImageStretchRightInset: Swift.Int
  public var setCustomerBackgroundImageStretchBottomInset: Swift.Int
  public var setAgentBackgroundImageStretchingPoint: UIKit.UIEdgeInsets?
  public var setCustomerBackgroundImageStretchingPoint: UIKit.UIEdgeInsets?
  public var setMessageTimeStamp: Swift.Bool
  public var setMessageTimeStampFormat: Swift.String
  public var showTimestampLowerCase: Swift.Bool
  public var agentTimeStampBackgroundColor: UIKit.UIColor
  public var agentTimeStampTextColor: UIKit.UIColor
  public var agentTimeStampBorderColor: UIKit.UIColor
  public var agentTimeStampCornerRadius: Swift.Int
  public var agentTimeStampBorderWidth: Swift.Int
  public var agentTimeStampFontStyle: UIKit.UIFont
  public var agentTimeStampTextAlignment: UIKit.NSTextAlignment
  public var agentTimeStampLeftPadding: Swift.Int
  public var agentTimeStampRightPadding: Swift.Int
  public var agentTimeStampTopPadding: Swift.Int
  public var agentTimeStampBottomPadding: Swift.Int
  public var agentTimeStampLeftMargin: Swift.Int
  public var agentTimeStampRightMargin: Swift.Int
  public var agentTimeStampTopMargin: Swift.Int
  public var agentTimeStampBottomMargin: Swift.Int
  public var customerTimeStampBackgroundColor: UIKit.UIColor
  public var customerTimeStampTextColor: UIKit.UIColor
  public var customerSendingFailedTextColor: UIKit.UIColor
  public var customerTimeStampBorderColor: UIKit.UIColor
  public var customerTimeStampCornerRadius: Swift.Int
  public var customerTimeStampBorderWidth: Swift.Int
  public var customerTimeStampFontStyle: UIKit.UIFont
  public var customerTimeStampTextAlignment: UIKit.NSTextAlignment
  public var customerTimeStampLeftPadding: Swift.Int
  public var customerTimeStampRightPadding: Swift.Int
  public var customerTimeStampTopPadding: Swift.Int
  public var customerTimeStampBottomPadding: Swift.Int
  public var customerTimeStampLeftMargin: Swift.Int
  public var customerTimeStampRightMargin: Swift.Int
  public var customerTimeStampTopMargin: Swift.Int
  public var customerTimeStampBottomMargin: Swift.Int
  public var setAgentIconImagePosition: Swift.Int
  public var setCustomerIconImagePosition: Swift.Int
  public var htmlLinkColor: UIKit.UIColor
  public var htmlLinkGreyScaleModeColor: UIKit.UIColor
  public var agentTypingMessage: Swift.String
  public var ignoreDefaultChime: Swift.Bool
  public var playVoiceOverOnRestore: Swift.Bool
  public var groupMsgs: Swift.Bool
  public var groupMsgsByTimeStampOnly: Swift.Bool
  public var spaceBetweenGroupingCells: Swift.Int
  public var showActivityIndicator: Swift.Bool
  public var messageSendingText: Swift.String
  public var messageSentText: Swift.String
  public var messageFailedText: Swift.String
  public var timestampMessageSeparator: Swift.String
  public var suggestedActionButtonColor: UIKit.UIColor
  public var suggestedActionButtonBorderColor: UIKit.UIColor
  public var suggestedActionButtonFontStyle: UIKit.UIFont
  public var suggestedActionButtonBorderWidth: Swift.Int
  public var adaptiveCardsSpacing: CoreFoundation.CGFloat
  public var adaptiveCardContainerBackground: UIKit.UIColor
  public var adaptiveCardBorderColor: UIKit.UIColor
  public var adaptiveCardBorderWidth: CoreFoundation.CGFloat
  public var imageCardTitleFontStyle: UIKit.UIFont
  public var imageCardTitleAlignment: UIKit.NSTextAlignment
  public var imageCardTitleColor: UIKit.UIColor
  public var videoCardTitleFontStyle: UIKit.UIFont
  public var videoCardSubtitleFontStyle: UIKit.UIFont
  public var videoCardTextFontStyle: UIKit.UIFont
  public var videoCardTitleAlignment: UIKit.NSTextAlignment
  public var videoCardSubtitleAlignment: UIKit.NSTextAlignment
  public var videoCardTextAlignment: UIKit.NSTextAlignment
  public var videoCardTitleColor: UIKit.UIColor
  public var videoCardSubtitleColor: UIKit.UIColor
  public var videoCardTextColor: UIKit.UIColor
  public var videoCardPlayerTintColor: UIKit.UIColor
  public var videoCardPlayerBackgroundColor: UIKit.UIColor
  public var autoPlayVideoOnComplete: Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class EmailPaneProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var isErrorImageRequired: Swift.Bool
  public var enableSendButton: Swift.Bool
  public var placeholderPadding: [CoreFoundation.CGFloat]
  public var transparentBackgroundColorOpacity: Swift.Float
  public var transparentBackgroundColor: UIKit.UIColor
  public var emailPaneBackgroundColor: UIKit.UIColor
  public var emailPaneHeight: Swift.Double
  public var emailPaneHeightAtLandscape: Swift.Double
  public var emailPaneTextGroupSpacing: Swift.Int
  public var hideTitle: Swift.Bool
  public var titleText: Swift.String
  public var titleTextColor: UIKit.UIColor
  public var titleTextFontStyle: UIKit.UIFont
  public var titleTextAlignment: UIKit.NSTextAlignment
  public var hideSubTitle: Swift.Bool
  public var subTitleText: Swift.String
  public var subTitleTextColor: UIKit.UIColor
  public var subTitleTextFontStyle: UIKit.UIFont
  public var subTitleTextAlignment: UIKit.NSTextAlignment
  public var cancelButtonText: Swift.String
  public var cancelButtonBackgroundColor: UIKit.UIColor
  public var cancelButtonTextColor: UIKit.UIColor
  public var cancelButtonBorderColor: UIKit.UIColor
  public var cancelButtonFontStyle: UIKit.UIFont
  public var buttonGroupViewHeight: Swift.Int
  public var buttonGroupInBetweenBorderWidth: Swift.Int
  public var buttonGroupViewTopBorderWidth: Swift.Int
  public var buttonGroupBackgroundColor: UIKit.UIColor
  public var sendButtonBorderColor: UIKit.UIColor
  public var sendButtonTextColor: UIKit.UIColor
  public var sendButtonText: Swift.String
  public var sendButtonBackgroundColor: UIKit.UIColor
  public var sendButtonFontStyle: UIKit.UIFont
  public var emailTextFieldCornerRadius: Swift.Int
  public var emailTextFieldBorderWidth: Swift.Int
  public var emailTextFieldBorderColor: UIKit.UIColor
  public var emailTextFieldColor: UIKit.UIColor
  public var emailTextFieldFontStyle: UIKit.UIFont
  public var emailTextFieldAccessibilityLabel: Swift.String
  public var emailHintText: Swift.String
  public var emptyEmailAddressErrorMessage: Swift.String
  public var invalidEmailAddressErrorMessage: Swift.String
  public var errorMessageTextColor: UIKit.UIColor
  public var emailErrorImage: Foundation.Data?
  public var emailErrorFontStyle: UIKit.UIFont
  public var emailErrorImageHeight: Swift.Int
  public var emailErrorImageWidth: Swift.Int
  public var errorFieldBottomSpacing: Swift.Int
  public var errorFieldTopSpacing: Swift.Int
  public var errorFieldBottomSpacingAtLandscape: Swift.Int
  public var emailPaneCornerRadius: Swift.Int
  public var emailPaneBorderWidth: Swift.Int
  public var emailPaneBorderColor: UIKit.UIColor
  public var mailSentFailureErrorMessage: Swift.String
  public var emailFieldMaxChars: Swift.Int
  public var emailRequestSuccessNotificationText: Swift.String
  public var emailRequestFailedNotificationText: Swift.String
  public var attachmentMessage: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class LoadingPaneProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var hideLoading: Swift.Bool
  public var backgroundColor: UIKit.UIColor
  public var backgroundColorOpacity: Swift.Float
  public var hideTitle: Swift.Bool
  public var hideSubTitle: Swift.Bool
  public var hideSpinnerText: Swift.Bool
  public var spaceBetweenLoadingPaneChilds: Swift.Int
  public var chatImageHeight: Swift.Int
  public var chatImage: UIKit.UIImage?
  public var titleText: Swift.String
  public var titleColor: UIKit.UIColor
  public var titleTextAlignment: UIKit.NSTextAlignment
  public var subTitleText: Swift.String
  public var subTitleColor: UIKit.UIColor
  public var subTitleTextAlignment: UIKit.NSTextAlignment
  public var subTitleTopMargin: Swift.Int
  public var spinnerText: Swift.String
  public var spinnerTextColor: UIKit.UIColor
  public var spinnerTextAlignment: UIKit.NSTextAlignment
  public var spinnerTextTopMargin: Swift.Int
  public var titleFontStyle: UIKit.UIFont
  public var spinnerTextFontStyle: UIKit.UIFont
  public var subTitleFontStyle: (UIKit.UIFont)
  public var loadingPaneAccessibilityText: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NotificationPaneProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var headerBackgroundColor: UIKit.UIColor
  public var headerTitleText: Swift.String
  @objc public var headerTitleTextFont: (UIKit.UIFont)
  public var headerTitleColor: UIKit.UIColor
  public var headerInfoImageData: Foundation.Data?
  public var headerCloseImageData: Foundation.Data?
  public var headerTitleTextAlignment: UIKit.NSTextAlignment
  public var headerBackgroundColorWithAllSuccess: UIKit.UIColor
  public var headerBackgroundColorWithAllError: UIKit.UIColor
  public var cellSuccessBackgroundColor: UIKit.UIColor
  public var cellWarningBackgroundColor: UIKit.UIColor
  public var cellErrorBackgroundColor: UIKit.UIColor
  public var cellTitleTextAlignment: UIKit.NSTextAlignment
  @objc public var cellTitleTextFont: (UIKit.UIFont)
  public var cellTitleSuccessColor: UIKit.UIColor
  public var cellTitleErrorColor: UIKit.UIColor
  public var cellTitleWarningColor: UIKit.UIColor
  public var cellSuccessInfoImageData: Foundation.Data?
  public var cellSuccessCloseImageData: Foundation.Data?
  public var cellErrorInfoImageData: Foundation.Data?
  public var cellErrorCloseImageData: Foundation.Data?
  public var cellWarningInfoImageData: Foundation.Data?
  public var cellWarningCloseImageData: Foundation.Data?
  public var spaceBetweenHeaderChilds: Swift.Int
  public var spaceBetweenCellChilds: Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ReconnectViewProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public var hideReconnectView: Swift.Bool
  @objc public var backgroundColor: UIKit.UIColor
  @objc public var reconnectViewBackgroundColor: UIKit.UIColor
  @objc public var reconnectViewBorderWidth: CoreFoundation.CGFloat
  @objc public var reconnectViewCornerRadius: CoreFoundation.CGFloat
  @objc public var reconnectViewBorderColor: UIKit.UIColor
  @objc public var hideReconnectTitle: Swift.Bool
  @objc public var reconnectTitleText: Swift.String
  @objc public var hideReconnectSubtitle: Swift.Bool
  @objc public var reconnectSubtitleText: Swift.String
  @objc public var reconnectTitleColor: UIKit.UIColor
  @objc public var reconnectSubtitleColor: UIKit.UIColor
  @objc public var reconnectTitleFontStyle: UIKit.UIFont
  @objc public var reconnectSubtitleFontStyle: UIKit.UIFont
  @objc public var hideReconnectIcon: Swift.Bool
  @objc public var reconnectIconData: Foundation.Data?
  @objc public var hideContinueChatButton: Swift.Bool
  @objc public var continueChatButtonText: Swift.String
  @objc public var hideStartNewChatButton: Swift.Bool
  @objc public var startNewChatButtonText: Swift.String
  @objc public var continueChatButtonTitleColor: UIKit.UIColor
  @objc public var continueChatButtonBackgroundColor: UIKit.UIColor
  @objc public var continueChatButtonBorderColor: UIKit.UIColor
  @objc public var continueChatButtonBorderWidth: CoreFoundation.CGFloat
  @objc public var continueChatButtonCornerRadius: CoreFoundation.CGFloat
  @objc public var startNewChatButtonTitleColor: UIKit.UIColor
  @objc public var startNewChatButtonBackgroundColor: UIKit.UIColor
  @objc public var startNewChatButtonBorderColor: UIKit.UIColor
  @objc public var startNewChatButtonBorderWidth: CoreFoundation.CGFloat
  @objc public var startNewChatButtonCornerRadius: CoreFoundation.CGFloat
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class OOOHoursViewProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var hideOOOHPane: Swift.Bool
  public var backgroundColor: UIKit.UIColor
  public var headerText: Swift.String
  public var hideTitle: Swift.Bool
  public var titleText: Swift.String
  public var titleTextColor: UIKit.UIColor
  public var titleFontStyle: UIKit.UIFont
  public var titleTextAlignment: UIKit.NSTextAlignment
  public var htmlLinkColor: UIKit.UIColor
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class StartChatErrorViewProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var backgroundColorOpacity: Swift.Float
  public var viewTitle: Swift.String
  public var hideErrorTitle: Swift.Bool
  public var hideErrorSubtitle: Swift.Bool
  public var errorPaneChildSpacing: Swift.Int
  public var errorTitleColor: UIKit.UIColor
  public var errorSubtitleColor: UIKit.UIColor
  public var errorTitleFontStyle: UIKit.UIFont
  public var errorTitleAlignment: UIKit.NSTextAlignment
  public var errorSubtitleFontStyle: UIKit.UIFont
  public var errorSubtitleAlignment: UIKit.NSTextAlignment
  public var errorSubtitleTopMargin: Swift.Int
  public var errorViewBackgroundColor: UIKit.UIColor
  public var hideErrorIcon: Swift.Bool
  public var errorIconData: Foundation.Data?
  public var networkErrorIconData: Foundation.Data?
  public var errorTitleText: Swift.String
  public var errorSubTitleText: Swift.String
  public var errorTitlePersistentChatRetrievalFailure: Swift.String
  public var errorTitleChatInitializationFailure: Swift.String
  public var errorTitleChatTokenRetrievalFailure: Swift.String
  public var errorTitleUninitializedChatSDKFailure: Swift.String
  public var errorTitleAuthSetupErrorTitleText: Swift.String
  public var errorTitleNetworkErrorText: Swift.String
  public var errorTitleClosedOrInvalidText: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ConfirmationPaneProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var closeConfirmationDialogBackgroundTintColor: UIKit.UIColor
  public var closeConfirmationDialogTitleForEmailAndDownload: Swift.String
  public var closeConfirmationDialogSubTitleForEmailAndDownload: Swift.String
  public var closeConfirmationDialogTitleForEmail: Swift.String
  public var closeConfirmationDialogSubTitleForEmail: Swift.String
  public var closeConfirmationDialogTitleForDownload: Swift.String
  public var closeConfirmationDialogSubTitleForDownload: Swift.String
  public var hideTitle: Swift.Bool
  public var titleText: Swift.String
  public var titleTextColor: UIKit.UIColor
  public var titleFont: (UIKit.UIFont)
  public var hideSubTitle: Swift.Bool
  public var subtitleText: Swift.String
  public var subtitleTextColor: UIKit.UIColor
  public var subtitleFont: UIKit.UIFont
  public var hideConfirmButton: Swift.Bool
  public var confirmButtonText: Swift.String
  public var confirmButtonAccessibilityLabel: Swift.String
  public var confirmButtonTextColor: UIKit.UIColor
  public var hideCancelButton: Swift.Bool
  public var cancelButtonText: Swift.String
  public var cancelButtonAccessibilityLabel: Swift.String
  public var cancelButtonTextColor: UIKit.UIColor
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PreChatPaneProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var requiredFieldMissingMessage: Swift.String
  public var hidePreChatSurveyPane: Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PostChatPaneProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var hidePostChatSurveyPane: Swift.Bool
  public var postChatLoadingBackground: UIKit.UIColor
  public var postChatLoadingTitle: Swift.String
  public var postChatLoadingTitleFont: UIKit.UIFont
  public var postChatLoadingTitleColor: UIKit.UIColor
  public var postChatLoadingTitleAlignment: UIKit.NSTextAlignment
  public var postChatLoadingSubTitle: Swift.String
  public var postChatLoadingSubTitleFont: UIKit.UIFont
  public var postChatLoadingSubTitleColor: UIKit.UIColor
  public var postChatLoadingSubTitleAlignment: UIKit.NSTextAlignment
  public var distanceBetweenLoadingViewTitleSubtitle: Swift.Int
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class DownloadedTranscriptProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var pageTitle: Swift.String
  public var attachmentMessage: Swift.String
  public var networkOnlineMessage: Swift.String
  public var networkOfflineMessage: Swift.String
  public var transcriptBackgroundColor: Swift.String
  public var agentAvatarBackgroundColor: Swift.String
  public var agentAvatarFontColor: Swift.String
  public var customerAvatarBackgroundColor: Swift.String
  public var customerAvatarFontColor: Swift.String
  public var disableMarkdownMessageFormatting: Swift.Bool
  public var disableNewLineMarkdownSupport: Swift.Bool
  public var cdnUrl: Swift.String
  public var fileName: Swift.String
  public var downloadErrorBannerMessage: Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class MediaPaneProperties : ObjectiveC.NSObject {
  @objc override dynamic public init()
  public var showMediaImage: Swift.Bool
  public var viewCornerRadius: Swift.Int
  public var viewBorderWidth: Swift.Int
  public var viewSpacing: Swift.Int
  public var viewBorderColor: UIKit.UIColor
  public var backgroundColorAgent: UIKit.UIColor
  public var downloadSectionBackgroundColorAgent: UIKit.UIColor
  public var backgroundColorCustomer: UIKit.UIColor
  public var downloadSectionBackgroundColorCustomer: UIKit.UIColor
  public var dividerBackgroundColor: UIKit.UIColor
  public var dividerHeight: Swift.Int
  public var photoMediaImage: UIKit.UIImage?
  public var videoMediaImage: UIKit.UIImage?
  public var pdfMediaImage: UIKit.UIImage?
  public var audioMediaImage: UIKit.UIImage?
  public var attachmentMediaImage: UIKit.UIImage?
  public var mediaImageWidth: Swift.Int
  public var mediaImageHeight: Swift.Int
  public var downloadImage: UIKit.UIImage?
  public var downloadImageWidth: Swift.Int
  public var downloadImageHeight: Swift.Int
  public var mediaNameTextColor: UIKit.UIColor
  public var mediaNameTextFont: UIKit.UIFont
  public var mediaNameTextAlignment: UIKit.NSTextAlignment
  public var mediaNameTextLeftPadding: Swift.Int
  public var mediaNameTextRightPadding: Swift.Int
  public var playerTintColor: UIKit.UIColor
  public var playerBackgroundColor: UIKit.UIColor
  @objc deinit
}
extension ContactCenterMessagingWidget.TitleBarElement : Swift.Equatable {}
extension ContactCenterMessagingWidget.TitleBarElement : Swift.Hashable {}
extension ContactCenterMessagingWidget.TitleBarElement : Swift.RawRepresentable {}
extension ContactCenterMessagingWidget.MessagingErrorStates : Swift.Equatable {}
extension ContactCenterMessagingWidget.MessagingErrorStates : Swift.Hashable {}
extension ContactCenterMessagingWidget.MessagingErrorStates : Swift.RawRepresentable {}
extension ContactCenterMessagingWidget.TitlePosition : Swift.Equatable {}
extension ContactCenterMessagingWidget.TitlePosition : Swift.Hashable {}
extension ContactCenterMessagingWidget.TitlePosition : Swift.RawRepresentable {}
